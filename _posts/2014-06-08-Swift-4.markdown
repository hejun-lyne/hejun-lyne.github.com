---
layout: post
title: Swift编程语言（4）
category: swift
url: Swift-4.html
summary: 《The Swift Programming Language》的学习翻译，字符和字符串
---
####字符串和字符（Strings and Characters）
String和`NSString`是相通的，所有NSString的API都可以对String调用。

**String Literals**<br />
和NSString Literals不同，不需要`@`符号，只需要使用双引号即可。
{% highlight js %}
let someString = "Some string literal value"
{% endhighlight %}
 String Literal可以包括下面这些特殊字符：
 * 转义的特殊字符"\0（null字符）"，"\\\（左斜线）"，"\t（tab）"，"\n（换行）"，"\r（回车）"，"\"（双引号）"，"\'（单引号）"。
 * Single-byte的Unicode量词，写作`\xnn`，这里的`nn`代表两个十六进制数字
 * Two-byte的Unicode量词，写作`\Unnnn`，这里的`nnnn`代表4个十六进制数字
 * Four-byte的Unicode量词，写作`\Unnnnnnnn`，这里的`nnnnnnnn`表示8个十六进制的数字

{% highlight js %}
let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\x24"        // $,  Unicode scalar U+0024
let blackHeart = "\u2665"      // ♥,  Unicode scalar U+2665
let sparklingHeart = "\U0001F496"  // 💖, Unicode scalar U+1F496”
{% endhighlight %}

**初始化空字符串**<br />
有两种方式初始化：
{% highlight js %}
var emptyString = "" // empty string literal
var anotherEmptyString = String() // initializer syntax
// these two strings are both empty, and are equivalent to each other

// check if empty
if emptyString.isEmpty {
    println("Nothing to see here")
}
// prints "Nothing to see here"
{% endhighlight %}

**字符串的可变性（Mutability）**<br />
{% highlight js %}
var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"
 
let constantString = "Highlander"
constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified
{% endhighlight %}

**字符串属于值类型（Value Types）**<br />
字符串向函数或方法的传值默认都是复制传值（而`NSString`默认是引用传值）。
Swift的编译器对string的使用进行了优化，意味着只有在真正需要的时候才会对字符串进行复制。

**字符（Characters的使用）**<br />
每一个字符值代表一个Unicode字符，可以用`for-in`遍历字符串中的所有字符
{% highlight js %}
for character in "Dog!🐶" {
    println(character)
}
// D
// o
// g
// !
// 🐶”
{% endhighlight %}
创建一个字符常量：
{% highlight js %}
let yenSign: Character = "¥"
{% endhighlight %}

**计算字符**<br />
可以调用global函数`countElements`：
{% highlight js %}
let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"
println("unusualMenagerie has \(countElements(unusualMenagerie)) characters")
// prints "unusualMenagerie has 40 characters
{% endhighlight %}
>因为不同Unicode字符和同一个Unicode字符的不同表达方式占用不同的内存空间，所有Swift String中的每一个字符并不是占用相同的内存空间，所以字符串的长度不能通过迭代计算字符的个数来得到，`countElements`是通过迭代所有字符来计算个数的，所以对于长字符串可能效率不是很高。而且`countElements`的到的结果并不是始终和`NSString`的`length`属性一致的，`NSString`的length是字符串的UTF-16表达式的字符个数，所以如果要在Swift `String`得到相同的值，应该调用属性`utf16count`。

**字符串和字符的拼接**<br />
使用`+`、`+=`来得到新的字符串。

**字符串插入（Interpolation）**<br />
如前面已经在使用的
{% highlight js %}
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5
{% endhighlight %}

####字符串比较
三种比较方式：字符串相等、前缀相等、后缀相等。

**字符串相等**<br />
使用`==`：
{% highlight js %}
let quotation = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation {
    println("These two strings are considered equal")
}
// prints "These two strings are considered equal
{% endhighlight %}

**前缀和后缀相等**<br />
使用方法`hasPreffix`和`hasSuffix`。

**Uppercase和Lowercase字符串**<br />
访问字符串的属性`uppercaseString`和`lowercaseString`即可

**Unicode**<br />
Swift的`String`和`Character`都是完全Unicode-compliant的，支持很多不同的Unicode编码。

**Unicode术语**<br />
每一个Unicode字符都可使用1个或多个unicode*量词（scalar）*来表示。一个Unicode量词是一个唯一的21-bit的数值，例如`U+0061`表示`LOWERCASE LATIN LETTER A("a")`。
当Unicode字符串写入文件或其他存储的时候，这些unicode量词会被编码成一或多种Unicode-defined格式，每一种格式将字符串编码成很多小的分片（chunks）（称之为*编码单元code units*）。包括UTF-8、UTF-16等。

**字符串的Unicode表达**<br />
Swift使用了不同的属性来获取字符串的不同Unicode表达：
* UTF-8，使用`utf8`属性
* UTF-16，使用`utf16`属性
* 21-bit Unicode scalar values，使用`unicodeScalars`属性

**UTF-8**<br />
{% highlight js %}
let dogString = "Dog!🐶"
for codeUnit in dogString.utf8 {
    print("\(codeUnit) ")
}
print("\n")
// 68 111 103 33 240 159 144 182
{% endhighlight %}

**UTF-16**<br />
{% highlight js %}
 for codeUnit in dogString.utf16 {
     print("\(codeUnit) ")
 }
 print("\n")
 // 68 111 103 33 55357 56374
{% endhighlight %}

**Unicode Scalars**<br />
{% highlight js %}
  for scalar in dogString.unicodeScalars {
      print("\(scalar.value) ")
  }
  print("\n")
  // 68 111 103 33 128054
  
  for scalar in dogString.unicodeScalars {
      print("\(scalar) ")
  }
  // D o g ! 🐶
{% endhighlight %}