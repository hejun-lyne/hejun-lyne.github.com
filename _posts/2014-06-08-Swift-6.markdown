---
layout: post
title: Swift编程语言（6）
category: swift
url: Swift-6.html
summary: 《The Swift Programming Language》的学习翻译，控制流
---
###控制流（Control Flow）
与C语言相比，增加了`for-in`。而`switch`语句不"fall through"，避免了C里面因为`break`语句缺失造成的错误。
####For循环
供了两种for循环:
* for-in
* for-condition-increment

**For-In**<br />
{% highlight js %}
for index in 1...5 {
    println("\(index) times 5 is \(index * 5)")
}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25
{% endhighlight %}
如果不需要使用`index`的话可以使用`_`代替：
{% highlight js %}
let base = 3
let power = 10
var answer = 1
for _ in 1...power {
    answer *= base
}
println("\(base) to the power of \(power) is \(answer)")
// prints "3 to the power of 10 is 59049
{% endhighlight %}
`for-in`用于数组的遍历：
{% highlight js %}
let names = ["Anna", "Alex", "Brian", "Jack"]
for name in names {
    println("Hello, \(name)!")
}
// Hello, Anna!
// Hello, Alex!
// Hello, Brian!
// Hello, Jack!
{% endhighlight %}
用于字典的遍历：
{% highlight js %}
let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
    println("\(animalName)s have \(legCount) legs")
}
// spiders have 8 legs
// ants have 6 legs
// cats have 4 legs
{% endhighlight %}
用于字符串的遍历：
{% highlight js %}
for character in "Hello" {
    println(character)
}
// H
// e
// l
// l
// o
{% endhighlight %}

**For-Condition-Increment**<br />
Swift支持传统的C-style `for`循环：
{% highlight js %}
for var index = 0; index < 3; ++index {
    println("index is \(index)")
}
// index is 0
// index is 1
// index is 2
{% endhighlight %}

**While循环**<br />
格式如下：
{% highlight js %}
while condition {
    statements
}
{% endhighlight %}

**Do-While**<br />
格式如下：
{% highlight js %}
do {
    statements
} while condition
{% endhighlight %}

####条件语句
包括`if`和`switch`。

**If**<br />
没啥特别的

**Switch**<br />
格式如下，注意没有`break`语句
{% highlight js %}
switch some value to consider {
case value 1:
    respond to value 1
case value 2,
value 3:
    respond to value 2 or 3
default:
    otherwise, do something else
}
{% endhighlight %}
注意switch语句在每一个`case`的代码执行完之后自动`break`，不会往下执行。
每一个`case`的代码块必须至少包含一条语句（不可为空）：
{% highlight js %}
let anotherCharacter: Character = "a"
switch anotherCharacter {
case "a":
case "A":
    println("The letter A")
default:
    println("Not the letter A")
}
// this will report a compile-time error

{% endhighlight %}
>如果需要传统switch语句一样"fallthrough"的话，需要使用`fallthrough`关键字。

**范围匹配**<br />
可以使用范围操作符来匹配：
{% highlight js %}
let count = 3_000_000_000_000
let countedThings = "stars in the Milky Way"
var naturalCount: String
switch count {
case 0:
    naturalCount = "no"
case 1...3:
    naturalCount = "a few"
case 4...9:
    naturalCount = "several"
case 10...99:
    naturalCount = "tens of"
case 100...999:
    naturalCount = "hundreds of"
case 1000...999_999:
    naturalCount = "thousands of"
default:
    naturalCount = "millions and millions of"
}
println("There are \(naturalCount) \(countedThings).")
// prints "There are millions and millions of stars in the Milky Way.
{% endhighlight %}

**元组（Tuples）**<br />
元组也可以作为case语句的条件：
{% highlight js %}
let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    println("(0, 0) is at the origin")
case (_, 0):
    println("(\(somePoint.0), 0) is on the x-axis")
case (0, _):
    println("(0, \(somePoint.1)) is on the y-axis")
case (-2...2, -2...2):
    println("(\(somePoint.0), \(somePoint.1)) is inside the box")
default:
    println("(\(somePoint.0), \(somePoint.1)) is outside of the box")
}
// prints "(1, 1) is inside the box
{% endhighlight %}

**值绑定（Value Bindings）**<br />
可以将条件中的值临时绑定到常量或变量中，以便在代码块中使用：
{% highlight js %}
let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    println("on the x-axis with an x value of \(x)")
case (0, let y):
    println("on the y-axis with a y value of \(y)")
case let (x, y):
    println("somewhere else at (\(x), \(y))")
}
// prints "on the x-axis with an x value of 2
{% endhighlight %}
上面的`let`可以替换为`var`，这样就可以在代码块内进行修改了。

**Where**<br />
在`switch`的case语句可以使用`where`添加来添加额外的检查：
{% highlight js %}
let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    println("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
    println("(\(x), \(y)) is on the line x == -y")
case let (x, y):
    println("(\(x), \(y)) is just some arbitrary point")
}
// prints "(1, -1) is on the line x == -y
{% endhighlight %}

####控制转移语句
包括：`continue`、`break`、`fallthrough`、`return`。

**Continue**<br />
在循环中使用，和C里面的一样。

**Break**<br />
没啥改变。
我们在前面提到空的switch case是不能使用的，那么如果确实要忽略该case，应该使用`break`。

**Fallthrough**<br />
使用fallthrough继续执行下一个switch case的代码块（*不进行条件检查*）：
{% highlight js %}
let integerToDescribe = 5
var description = "The number \(integerToDescribe) is"
switch integerToDescribe {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough
default:
    description += " an integer."
}
println(description)
// prints "The number 5 is a prime number, and also an integer.
{% endhighlight %}

####打标语句
如果有嵌套循环，你想指定从哪层循环break的时候，可以使用label，格式如下：
{% highlight js %}
label name: while condition {
    statements
}
{% endhighlight %}
例如：
{% highlight js %}
gameLoop: while square != finalSquare {
    if ++diceRoll == 7 { diceRoll = 1 }
    switch square + diceRoll {
    case finalSquare:
        // diceRoll will move us to the final square, so the game is over
        break gameLoop
    case let newSquare where newSquare > finalSquare:
        // diceRoll will move us beyond the final square, so roll again
        continue gameLoop
    default:
        // this is a valid move, so find out its effect
        square += diceRoll
        square += board[square]
    }
}
println("Game over!")
{% endhighlight %}